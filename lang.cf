-- Maciej Andrejczuk

comment "//" ;
comment "/*" "*/" ;

Prog.  Program  ::= [Function] ;
Fun.   Function ::= Type Ident "(" [FunDecl] ")" StmBlock ;
Block. StmBlock    ::= "{" [Stm] "}" ;

FDec.    FunDecl  ::= Decl ;
FVarDec. FunDecl  ::= "var" Decl ;
Dec.     Decl     ::= Type [Ident] ;
Def.     Def      ::= Decl "=" Exp ;

terminator Function "" ;
terminator Stm "" ;
separator  FunDecl "," ;
separator  nonempty Ident "," ;

SDecl.   Stm ::= Decl ";" ;
SDef.    Stm ::= Def ";" ;
SExp.    Stm ::= Exp ";" ;
SAssign. Stm ::= Ident "=" Exp ;
SFun.    Stm ::= Function ";" ;
SBlock.  Stm ::= StmBlock ;
SWhile.  Stm ::= "while" "(" Exp ")" StmBlock ";" ;
SReturn. Stm ::= "return" Exp ";" ;
SIf.     Stm ::= "if" "(" Exp ")" StmBlock OptElse ;
SNoElse. OptElse ::= ";" ;
SIfElse. OptElse ::= "else" StmBlock ";" ;
-- Jednoznacznosc if dzieki wymuszeniu nawiasow klamrowych


EOr.     Exp ::= Exp "or" Exp1 ;
BAnd.    Exp1 ::= Exp1 "and" Exp2 ;
BRel.    Exp2 ::= Exp3 OpRel Exp3 ;
EAdd.    Exp3 ::= Exp3 "+" Exp4 ;
ESub.    Exp3 ::= Exp3 "-" Exp4 ;
EMul.    Exp4 ::= Exp4 "*" Exp5 ;
EDiv.    Exp4 ::= Exp4 "/" Exp5 ;
EMod.    Exp4 ::= Exp4 "%" Exp5 ;
BNot.    Exp5 ::= "not" Exp6 ;
ECall.   Exp6 ::= Ident "(" [Exp] ")" ;
EArray.  Exp6 ::= Ident "[" Integer "]" ;
EVar.    Exp7 ::= Ident ;
EStr.    Exp7 ::= String ;
EInt.    Exp7 ::= Integer ;
EBool.   Exp7 ::= BoolConst ;

OpEq.   OpRel ::= "==" ;
OpNeq.  OpRel ::= "!=" ;
OpLt.   OpRel ::= "<" ;
OpLe.   OpRel ::= "<=" ;
OpGt.   OpRel ::= ">" ;
OpGe.   OpRel ::= ">=" ;

BTrue.   BoolConst ::= "True" ;
BFalse.  BoolConst ::= "False" ;

coercions Exp 7 ;

separator Exp "," ;

TInt.    Type ::= "int" ;
TString. Type ::= "string" ;
TBool.   Type ::= "bool" ;
TArray.  Type ::= Type "[]" ;

