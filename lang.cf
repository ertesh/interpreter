-- Maciej Andrejczuk

comment "//" ;
comment "/*" "*/" ;

Prog.  Program  ::= [Function] ;
Fun.   Function ::= Type Ident "(" [FunDecl] ")" StmBlock ;
Block. StmBlock    ::= "{" [Stm] "}" ;

FDec.    FunDecl  ::= Decl ; -- Modifier
FVarDec. FunDecl  ::= "var" Decl ;
Dec.     Decl     ::= Type [Ident] ;
Def.     Def      ::= Decl "=" Exp ;

terminator Function "" ;
terminator Stm "" ;
separator  FunDecl "," ;
separator  nonempty Ident "," ;

SDecl.   Stm ::= Decl ";" ;
SDef.    Stm ::= Def ";" ;
SExp.    Stm ::= Exp ";" ;
SAssign. Stm ::= Ident "=" Exp ;
SFun.    Stm ::= Function ";" ;
SBlock.  Stm ::= StmBlock ;
SWhile.  Stm ::= "while" "(" Exp ")" StmBlock ";";
SReturn. Stm ::= "return" Exp ";" ;
SIf.     Stm ::= "if" "(" BoolExp ")" StmBlock OptElse;
SNoElse. OptElse ::= ";" ;
SIfElse. OptElse ::= "else" StmBlock ";" ;
-- Jednoznacznosc if dzieki wymuszeniu nawiasow klamrowych


BOr.     BoolExp ::= BoolExp "or" BoolExp1 ;
BAnd.    BoolExp1 ::= BoolExp1 "and" BoolExp2 ; 
BRel.    BoolExp2 ::= Exp OpRel Exp ;
BNot.    BoolExp3 ::= "not" BoolExp ;
BVal.    BoolExp4 ::= BoolConst ;

BTrue.   BoolConst ::= "True" ;
BFalse.  BoolConst ::= "False" ;

coercions BoolExp 5 ;

OpEq.   OpRel ::= "==" ;
OpNeq.  OpRel ::= "!=" ;
OpLt.   OpRel ::= "<" ;
OpLe.   OpRel ::= "<=" ;
OpGt.   OpRel ::= ">" ;
OpGe.   OpRel ::= ">=" ;

EAdd.    Exp ::= Exp "+" Exp1 ;
ESub.    Exp ::= Exp "-" Exp1 ;
EMul.    Exp2 ::= Exp1 "*" Exp2 ;
EDiv.    Exp2 ::= Exp1 "/" Exp2 ;
EMod.    Exp2 ::= Exp1 "%" Exp2 ;
EBoolOp. Exp3 ::= BoolExp ;
Call.    Exp4 ::= Ident "(" [Exp] ")" ;
EArray.  Exp4 ::= Ident "[" Integer "]" ;
EVar.    Exp4 ::= Ident ;
EStr.    Exp4 ::= String ;
EInt.    Exp4 ::= Integer ;

coercions Exp 4 ;

separator Exp "," ;

TInt.    Type ::= "int" ;
TString. Type ::= "string" ;
TBool.   Type ::= "bool" ;
TArray.  Type ::= Type "[]" ;

